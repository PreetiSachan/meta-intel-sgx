From 8269162f8bb36ff0e1c1884d01e0aa7158885b72 Mon Sep 17 00:00:00 2001
From: Preeti Sachan <preeti.sachan@intel.com>
Date: Mon, 25 Mar 2024 12:27:55 +0530
Subject: [PATCH] tlibcxx use std::is_convertible built-in traits

GCC 13 barfs on parsing <type_traits> because of the declarations
of `struct __is_convertible`.  In GCC 13, `__is_convertible` is a
built-in, but `__is_convertible_to` is not.

GCC v13 commit to use new built-ins for std::is_convertible traits:
https://github.com/gcc-mirror/gcc/commit/af85ad891703db220b25e7847f10d0bbec4becf4

Upstream-Status: Backport [https://github.com/intel/linux-sgx/commit/e7bbc158fa242cf5b5534ecb1fb2668edf5cd887]

Signed-off-by: Preeti Sachan <preeti.sachan@intel.com>
---
 sdk/tlibcxx/include/type_traits | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/sdk/tlibcxx/include/type_traits b/sdk/tlibcxx/include/type_traits
index 59dfd1e9..e4f66aa4 100644
--- a/sdk/tlibcxx/include/type_traits
+++ b/sdk/tlibcxx/include/type_traits
@@ -1682,12 +1682,12 @@ struct __is_core_convertible<_Tp, _Up, decltype(
 
 // is_convertible
 
-#if __has_feature(is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
+#if __has_builtin(__is_convertible) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK)
 
 template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible
-    : public integral_constant<bool, __is_convertible_to(_T1, _T2)> {};
+    : public integral_constant<bool, __is_convertible(_T1, _T2)> {};
 
-#else  // __has_feature(is_convertible_to)
+#else  // __has_builtin(__is_convertible)
 
 namespace __is_convertible_imp
 {
@@ -1754,7 +1754,7 @@ template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible
     static const size_t __complete_check2 = __is_convertible_check<_T2>::__v;
 };
 
-#endif  // __has_feature(is_convertible_to)
+#endif  // __has_builtin(__is_convertible)
 
 #if _LIBCPP_STD_VER > 14 && !defined(_LIBCPP_HAS_NO_VARIABLE_TEMPLATES)
 template <class _From, class _To>
-- 
2.34.1

